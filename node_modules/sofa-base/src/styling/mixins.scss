

@mixin vendor-prefix($name, $argument) {
  -ms-#{$name}: $argument;
  -moz-#{$name}: $argument;
  -o-#{$name}: $argument;
  -webkit-#{$name}: $argument;
  #{$name}: $argument;
}

@mixin vendor-prefix-value($name, $argument) {
  #{$name}: -ms-#{$argument};
  #{$name}: -moz-#{$argument};
  #{$name}: -o-#{$argument};
  #{$name}: -webkit-#{$argument};
  #{$name}: $argument;
}

@mixin clearfix {
    content: "";
    display: table;
    clear: both;
}

@mixin anti-blurry {
    -webkit-transform: translate3d(0,0,0);
}

//todo: can we make that more generic so that we only need one
//black-or-white function that returns just black or white instead
///of beeing coupled to the color attribute?
@mixin black-or-white($color) {
    @if lightness($color) > 40 {
        color:  #000000;
    }
    @else {
        color: #ffffff;
    }
}

//Todo pass in the context-color (e.g. $content-background-color) so that
//the function has more knowledge about the context and can find the best match
@mixin try-lighter($attribute, $color, $amount:40%) {
    @if lightness($color) > 80 {
        #{$attribute}: darken($color, $amount);
    }
    @else {
        #{$attribute}: lighten($color, $amount);
    }
}

@mixin try-darker($attribute, $color, $amount:40%) {
    @if lightness($color) < 20 {
        #{$attribute}: lighten($color, $amount);
    }
    @else {
        #{$attribute}: darken($color, $amount);
    }
}

@mixin try-lighter-extended($attribute, $color, $prefix, $postfix, $amount:40%) {
    @if lightness($color) > 80 {
        #{$attribute}: #{$prefix} darken($color, $amount) #{$postfix};
    }
    @else {
        #{$attribute}: #{$prefix} lighten($color, $amount) #{$postfix};
    }
}

@mixin try-darker-extended($attribute, $color, $prefix, $postfix, $amount:40%) {
    @if lightness($color) < 20 {
        #{$attribute}: #{$prefix} lighten($color, $amount) #{$postfix};
    }
    @else {
        #{$attribute}: #{$prefix} darken($color, $amount) #{$postfix};
    }
}

@function try-darker($color, $amount: 40%){
    @if lightness($color) < 20 {
        @return lighten($color, $amount);
    }
    @else {
        @return darken($color, $amount);
    }
}

@function try-lighter($color, $amount: 40%){
    @if lightness($color) > 80 {
        @return darken($color, $amount);
    }
    @else {
        @return lighten($color, $amount);
    }
}

// tint() and shade() from https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/functions/_tint-shade.scss
// Add percentage of white to a color
@function tint($color, $percent){
    @return mix(white, $color, $percent);
}

// Add percentage of black to a color
@function shade($color, $percent){
    @return mix(black, $color, $percent);
}

@mixin button-gradient($bg-color){

    $background-color-mid: darken($bg-color, 10%);
    $background-color-last: darken($bg-color, 20%);

    background-image: none;
    background-color: $bg-color;
    background-image: -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, $bg-color), color-stop(3%, $background-color-mid), color-stop(100%, $background-color-last));
    background-image: -webkit-linear-gradient(top, $bg-color, $background-color-mid 3%, $background-color-last);
    background-image: linear-gradient(top, $bg-color, $background-color-mid 3%, $background-color-last)
}

@mixin button-gradient-pressed($temp-bg-color){

    $bg-color: lighten($temp-bg-color, 20%);

    $background-color-mid: darken($bg-color, 10%);
    $background-color-last: darken($bg-color, 20%);

    background-image: none;
    background-color: $bg-color;
    background-image: -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, $bg-color), color-stop(3%, $background-color-mid), color-stop(100%, $background-color-last));
    background-image: -webkit-linear-gradient(top, $bg-color, $background-color-mid 3%, $background-color-last);
    background-image: linear-gradient(top, $bg-color, $background-color-mid 3%, $background-color-last)
}


@mixin gradient-button($color) {
  @include background-image(
    linear-gradient(top,
      lighten($color, 20%) 0%,
      darken($color, 20%) 100%)
    );
}
